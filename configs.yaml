CARLA_CONFIG:
  NUM_OF_VEHICLES: 80
  NUM_OF_WALKERS: 40

AGENT_CONFIG:
  TRANSFORM: {location: [70, 13, 0.5], rotation: [0, 180, 0]}
  BLUEPRINT: vehicle.lincoln.*

SENSOR_CONFIG:
  RGB:
    TRANSFORM: {location: [0, 0, 1.6], rotation: [0, 0, 0]}
    BLUEPRINT: sensor.camera.rgb
    ATTRIBUTE: {image_size_x: 720, image_size_y: 360, fov: 90}

  DEPTH_RGB:
    TRANSFORM: { location: [ 0, 0, 1.6 ], rotation: [ 0, 0, 0 ] }
    BLUEPRINT: sensor.camera.depth
    ATTRIBUTE: { image_size_x: 720, image_size_y: 360, fov: 90 }

#  LIDAR:
#    TRANSFORM: { location: [ 0, 0, 1.6 ], rotation: [ 0, 0, 0 ] }
#    BLUEPRINT: sensor.lidar.ray_cast
#    ATTRIBUTE: {range: 70, rotation_frequency: 20, lower_fov: -45, points_per_second: 1280000, channels: 64}

  LIDAR_KITTI:
    TRANSFORM: { location: [ 0, 0, 1.6 ], rotation: [ 0, 0, 0 ] }
    BLUEPRINT: sensor.lidar.ray_cast
    ATTRIBUTE: {range: 70, points_per_second: 1280000, channels: 64, rotation_frequency: 20, upper_fov: 15, lower_fov: -15, horizontal_fov: 360}

  LIDAR_NUSC:
    TRANSFORM: { location: [ 0, 0, 1.6 ], rotation: [ 0, 0, 0 ] }
    BLUEPRINT: sensor.lidar.ray_cast
    ATTRIBUTE: {range: 70, points_per_second: 1400000, channels: 32, rotation_frequency: 20, upper_fov: 15, lower_fov: -15, horizontal_fov: 360}

  LIDAR: # perfect lidar with no noise and highest resolution
    TRANSFORM: { location: [ 0, 0, 1.6], rotation: [ 0, 0, 0 ] }
    BLUEPRINT: sensor.lidar.ray_cast
    ATTRIBUTE: {range: 80, points_per_second: 20971520, channels: 256, rotation_frequency: 20, upper_fov: 15, lower_fov: -15, dropoff_general_rate: 0, dropoff_intensity_limit: 0, dropoff_zero_intensity: 0, horizontal_fov: 360}
    # points per channel each step = points per second / (fps * channels) = 2500

  LIDAR_SEM: # perfect lidar with no noise and highest resolution
    TRANSFORM: { location: [ 0, 0, 1.6], rotation: [ 0, 0, 0 ] }
    BLUEPRINT: sensor.lidar.ray_cast_semantic
    ATTRIBUTE: {range: 80, points_per_second: 20971520, channels: 256, rotation_frequency: 20, upper_fov: 15, lower_fov: -15, horizontal_fov: 360}

#  LIDAR_VERTICAL: # perfect lidar with no noise and highest resolution
#    TRANSFORM: { location: [ 0, 0, 70.0 ], rotation: [ -90, 0, 0 ] }
#    BLUEPRINT: sensor.lidar.ray_cast
#    ATTRIBUTE: {range: 100, points_per_second: 64000000, channels: 256, rotation_frequency: 20, upper_fov: 45, lower_fov: -45, dropoff_general_rate: 0, dropoff_intensity_limit: 0, dropoff_zero_intensity: 0, horizontal_fov: 90}
#    # points per channel each step = points per second / (fps * channels) = 2500
#
#  LIDAR_SEM_VERTICAL: # perfect lidar with no noise and highest resolution
#    TRANSFORM: { location: [ 0, 0, 70.0 ], rotation: [ -90, 0, 0 ] }
#    BLUEPRINT: sensor.lidar.ray_cast_semantic
#    ATTRIBUTE: {range: 100, points_per_second: 64000000, channels: 256, rotation_frequency: 20, upper_fov: 45, lower_fov: -45, horizontal_fov: 90}
#

## Modify the attributes of the blueprint to set image resolution and field of view.
#lidar_full.set_attribute('channels', '256')
#lidar_full.set_attribute('range', '120')
#lidar_full.set_attribute('points_per_second', '64000000')
## points per channel each step = points per second / (fps * channels) = 2500
## typically for nuscenes and kitti, points per channel each step is around 2000-2100
#lidar_full.set_attribute('rotation_frequency', '10')
#lidar_full.set_attribute('upper_fov', '10')
#lidar_full.set_attribute('lower_fov', '-30')
#lidar_full.set_attribute('horizontal_fov', '360')
## lidar_full.set_attribute('atmosphere_attenuation_rate', '?')
#lidar_full.set_attribute('dropoff_general_rate', '0') # unrealistic zero dropoff for ground truth
#lidar_full.set_attribute('dropoff_intensity_limit', '0')
#lidar_full.set_attribute('dropoff_zero_intensity', '0')
#lidar_full.set_attribute('sensor_tick', '1.0') # simulation seconds between sensor captures (ticks)
#lidar_full.set_attribute('noise_stddev', '0') # std of the noise model to disturb each point along the vector of its raycast.
## kitti point_cloud_range = [0, -40, -3, 70.4, 40, 1]
## nuscenes point_cloud_range = [-50, -50, -5, 50, 50, 3]

FILTER_CONFIG:
  PRELIMINARY_FILTER_DISTANCE: 50
  MAX_RENDER_DEPTH_IN_METERS: 50
  MIN_VISIBLE_VERTICES_FOR_RENDER: 3
  MAX_OUT_VERTICES_FOR_RENDER: 5

SAVE_CONFIG:
  ROOT_PATH: /media/user/storage/data/sem_test
  STEP: 10
  NUM_FRAMES: 150
  TRAINVAL: valid